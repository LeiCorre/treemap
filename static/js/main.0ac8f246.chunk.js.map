{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["request","XMLHttpRequest","App","className","open","send","onload","data","JSON","parse","responseText","info","d3","append","style","attr","text","root","nodes","size","padding","treemap","sum","d","value","leaves","selectAll","enter","x0","y0","x1","y1","name","category","on","e","this","getAttribute","i","html","legend","leg","ReactDOM","render","document","getElementById","Boolean","window","location","hostname","match","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.0ac8f246.chunk.js","sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom'\nimport * as d3 from 'd3'\nimport './App.css';\n\n\nconst request = new XMLHttpRequest();\n  request.open('GET', 'https://cdn.freecodecamp.org/testable-projects-fcc/data/tree_map/movie-data.json')\n  request.send();\n  request.onload = function() {\n    let data = JSON.parse(request.responseText);\n    \n    let info = d3.select('.App') //copied from my Choropleth map\n                 .append('div')\n                 .style('height', \"40px\")\n                 .style('background-color', 'rgb(63,63,64,0.8')\n                 .style('padding', \"5px 10px\")\n                 .style('border-radius', '5%')\n                 .style('color', 'white')\n                 .style('font-size', '12px')\n                 .style('display', 'none')\n                 .style('position', 'absolute') \n                 .attr('id', 'tooltip') //inspired by the last answer on this post (https://www.freecodecamp.org/forum/t/d3-tooltip-wanted-is-that-15-chars-now/92398/6)\n        \n    d3.select('.App').append('h1').text('Movie Sales by Category').attr('id', 'title')\n    d3.select('.App').append('h4').text('Highest Selling Movies of the Time').attr('id', 'description')\n      \n    const svg = d3.select('.App')\n                    .append('svg')\n                    .attr('height', 550)\n                    .attr('width', 900)\n                    .style('margin-bottom', '1%')\n                    \n\n      var root = d3.hierarchy(data)\n      var treemap = d3.treemap()\n                      .size([900, 550])\n                      .padding(0.5);\n                      \n\n      var nodes = treemap(root\n        .sum(function (d) {return d.value; })\n      ).leaves()   // used raphaeluziel's answer as my reference https://forum.freecodecamp.org/t/treemap-test-5-6/227929/4             \n     \n     \n\n     d3.select('.App svg') //reference to https://www.d3indepth.com/layouts/ for showing me how to append the treemap to the svg\n     .selectAll('rect')\n     .data(nodes)\n     .enter()\n     .append('rect')\n     .attr('x', d => d.x0)\n     .attr('y', d => d.y0)\n     .attr('width', d=> d.x1 - d.x0)\n     .attr('height', d=> d.y1 - d.y0)\n     .style('stroke', 'white')\n     .style('stroke-width', '1')\n     .attr('data-value', d=> d.data.value)\n     .attr('data-name', d=> d.data.name)\n     .attr('data-category', d=> d.data.category)\n     .attr('class', 'tile')\n     .style('fill', d=> d.data.category === \"Action\"? \"hsl(214, 75%, 61%)\" : d.data.category=== \"Childrens\"? \"hsl(40, 75%, 61%)\" :  d.data.category===\"Drama\"? \"hsl(161, 75%, 61%)\" :  d.data.category===\"Adventure\"? \"hsl(108, 75%, 61%)\": d.data.category===\"Family\"? \"hsl(26, 75%, 61%)\" : d.data.category===\"Animation\"? \"hsl(277, 75%, 61%)\": d.data.category===\"Comedy\"? \"hsl(313, 75%, 61%)\": \"hsl(360, 75%, 61%)\" )   \n     .on('mouseover', function(e) {\n      info = info.style('display', 'inline')\n                 .attr('data-value', this.getAttribute('data-value'))\n                 .style('transform', i => 'translate(' + (this.getAttribute('x') -450) + 'px,' + (this.getAttribute('y')+50) +'px)')\n                 .html('<div>' + this.getAttribute('data-name') + ', ' + this.getAttribute('data-category') + ' </div><div>' + 'Value: ' + this.getAttribute('data-value') +'</div>')\n                \n    }) //all event data taken from my choropleth map\n    .on('mouseout', function (e) {\n     info = info.style('display', 'none')\n   }); \n\n     d3.select('.App svg')\n     .selectAll('foreignObject')\n     .data(nodes)\n     .enter()\n     .append('foreignObject')\n     .html(d=> '<div>'+ d.data.name + '</div>')\n     .attr('x', d => d.x0)\n     .attr('y', d => d.y0 + 10)\n     .attr('width', d=> d.x1 - d.x0)\n     .attr('height', '5')\n     .style('font-size', '10px')\n     .style('overflow', 'visible')\n     .style('line-height', '100%')   \n     \n     const legend = d3.select('.App') //Took my legend from my Heat Map and altered it\n                      .append('svg')\n                      .attr('height', 120)\n                      .attr('width', 500)\n                      .attr('id', 'legend')\n                      .style('text-align', 'left')\n                     \n\n      const leg = [1,2,3,4,5,6,7]     \n      \n      legend.selectAll('rect')\n            .data(leg) \n            .enter()\n            .append('rect') \n            .attr('height', 20)\n            .attr('width', 20)\n            .attr('y', i => i < 5? -22.5 + i*25 : -123 + i*25)\n            .attr('x', i => i < 5? 30 : 230)\n            .style('fill', i => i===7? \"hsl(214, 75%, 61%)\" : i===6? \"hsl(360, 75%, 61%)\" : i===5? \"hsl(161, 75%, 61%)\" : i==4? \"hsl(108, 75%, 61%)\" : i===3? \"hsl(26,75%,61%)\" : i===2? \"hsl(277, 75%, 61%)\" : \"hsl(313, 75%, 61%)\")\n            .attr('class', 'legend-item')\n\n      legend.selectAll('text')\n            .data(leg) \n            .enter()\n            .append('text') \n            .attr('height', 20)\n            .attr('width', 100)\n            .attr('y', i => i < 5? -7 + i*25 : -107 + i*25)\n            .attr('x', i => i < 5? 55 : 255)\n            .text(i => i===7? \"Action\" : i===6? \"Biography\" : i===5? \"Drama\" : i==4? \"Adventure\" : i===3? \"Family\" : i===2? \"Animation\" : \"Comedy\")                \n      \n      }\n\n\n\n\nfunction App() {\n  return (\n    <div className=\"App\">\n     \n    </div>\n  );\n}\n\nReactDOM.render(<App />, document.getElementById('root'))\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}